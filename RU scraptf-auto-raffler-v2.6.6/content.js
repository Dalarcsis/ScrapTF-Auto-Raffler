chrome.storage?.local?.get(["enabled", "wins", "winsHistory"], (data) => {
    const enabled = data.enabled ?? false;
    if (!enabled) {
        console.log('[AutoRaffler] ‚ùå –°–∫—Ä–∏–ø—Ç –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.');
        return;
    }
    runAutoRaffler();
});

function runAutoRaffler() {
    const SCROLL_COUNT = 2;
    const SCROLL_DELAY_MS = 1500;
    const AUTO_REFRESH_INTERVAL = 5 * 60 * 1000;
    const WAIT_AFTER_CLICK_MS = 2500;
    const ENTERING_CHECK_INTERVAL_MS = 250;

    function isCaptchaVisible() {
        const captcha = document.querySelector("#raffle-captcha-holder, #turnstile-container");
        return captcha && Array.from(captcha.children).some(el => el.offsetParent !== null);
    }

    function isPasswordRaffle() {
        return document.querySelector("#raffle-password") !== null;
    }

    function isPuzzleRaffle() {
        return window.location.pathname === "/raffles/puzzle";
    }

    async function autoScrollAndCollectRaffles() {
        console.log("[AutoRaffler] üîç –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–∞—á...");

        const initialRaffles = Array.from(document.querySelectorAll(".panel-raffle"));
        const lastVisible = initialRaffles.at(-1);
        const alreadyJoined = lastVisible?.classList.contains("raffle-entered");

        if (!alreadyJoined) {
            for (let i = 0; i < SCROLL_COUNT; i++) {
                window.scrollTo(0, document.body.scrollHeight);
                await new Promise(r => setTimeout(r, SCROLL_DELAY_MS));
            }
        }

        const raffles = Array.from(document.querySelectorAll(".panel-raffle"))
            .filter(panel =>
                !panel.classList.contains("raffle-entered") &&
                !panel.innerHTML.includes("Withdraw Items")
            )
            .map(panel => {
                const link = panel.querySelector("a[href^='/raffles/']");
                return link ? "https://scrap.tf" + link.getAttribute("href") : null;
            })
            .filter(Boolean);

        if (raffles.length === 0) {
            console.log("[AutoRaffler] ‚ùå –†–∞–∑–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚è≥ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...");
            setTimeout(() => window.location.reload(), AUTO_REFRESH_INTERVAL);
            return;
        }

        localStorage.setItem("raffleQueue", JSON.stringify(raffles));
        localStorage.setItem("raffleIndex", "0");
        console.log(`[AutoRaffler] ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–∞—á: ${raffles.length}`);
        window.location.href = raffles[0];
    }

    function handleSingleRaffle() {
        let queue = JSON.parse(localStorage.getItem("raffleQueue") || "[]");
        let index = parseInt(localStorage.getItem("raffleIndex") || "0");
        console.log(`[AutoRaffler] üé´ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–∞—á–∏ ${index + 1} –∏–∑ ${queue.length}`);

        const leaveBtn = document.querySelector("#raffle-leave");
        if (leaveBtn) {
            console.log("[AutoRaffler] üö™ –£–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π.");
            goToNextRaffle();
            return;
        }

        function checkAndClick() {
            let waited = 0;
            let alreadyWaiting = false;
            let captchaWaiting = false;

            const interval = setInterval(() => {
                if (isCaptchaVisible()) {
                    if (!captchaWaiting) {
                        captchaWaiting = true;
                        console.log("[AutoRaffler] üß© –ö–∞–ø—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è...");
                        chrome.runtime.sendMessage({
                            type: "notify",
                            title: "ü§ñ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ",
                            message: "–ü–æ—è–≤–∏–ª–∞—Å—å –∫–∞–ø—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é."
                        });
                    }
                    return;
                }

                if (captchaWaiting) {
                    console.log("[AutoRaffler] ‚úÖ –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...");
                    clearInterval(interval);
                    goToNextRaffle();
                    return;
                }

                const confirm = document.querySelector(".raffle-entered-msg");
                const leaveAfterClick = document.querySelector("#raffle-leave");

                if ((confirm && confirm.style.display !== "none") || leaveAfterClick) {
                    clearInterval(interval);
                    console.log("[AutoRaffler] ‚úÖ –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.");
                    goToNextRaffle();
                    return;
                }

                const entering = Array.from(document.querySelectorAll("button.btn-info.btn-lg[disabled]"))
                    .find(b => b.textContent.includes("Entering"));
                if (entering) {
                    if (!alreadyWaiting) {
                        console.log("[AutoRaffler] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 'Entering...'");
                        alreadyWaiting = true;
                    }
                    waited = 0;
                    return;
                }

                waited += ENTERING_CHECK_INTERVAL_MS;
                if (waited >= WAIT_AFTER_CLICK_MS) {
                    clearInterval(interval);
                    console.log("[AutoRaffler] ‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.");
                    goToNextRaffle();
                }
            }, ENTERING_CHECK_INTERVAL_MS);

            const buttons = document.querySelectorAll("button.btn.btn-embossed.btn-info.btn-lg");
            for (const btn of buttons) {
                if (btn.offsetParent === null) continue;
                if (btn.textContent.trim().includes("Enter Raffle")) {
                    console.log("[AutoRaffler] üîò –ù–∞–∂–∏–º–∞—é Enter Raffle...");
                    btn.click();
                    setTimeout(() => {
                        if (isCaptchaVisible()) {
                            captchaWaiting = true;
                            console.log("[AutoRaffler] üß© –ö–∞–ø—á–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ ‚Äî –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è.");
                            chrome.runtime.sendMessage({
                                type: "notify",
                                title: "ü§ñ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ!",
                                message: "–ü–æ—è–≤–∏–ª–∞—Å—å –∫–∞–ø—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é."
                            });
                        }
                    }, 1000);
                    return;
                }
            }

            if (isPasswordRaffle() || isPuzzleRaffle()) {
                console.log("[AutoRaffler] üîí –≠—Ç–æ —Ä–∞–∑–¥–∞—á–∏ —Å –ø–∞—Ä–æ–ª–µ–º –∏–ª–∏ –ø–∞–∑–ª–æ–º ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.");
                clearInterval(interval);
                return;
            }

            console.log("[AutoRaffler] ‚ùì –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞.");
            setTimeout(checkAndClick, 3000);
        }

        checkAndClick();
    }

    function goToNextRaffle() {
        if (isPasswordRaffle() || isPuzzleRaffle()) {
            console.log("[AutoRaffler] üß† –≠—Ç–æ —Ä–∞–∑–¥–∞—á–∏ —Å –ø–∞—Ä–æ–ª–µ–º –∏–ª–∏ –ø–∞–∑–ª–æ–º ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.");
            return;
        }

        const queue = JSON.parse(localStorage.getItem("raffleQueue") || "[]");
        let index = parseInt(localStorage.getItem("raffleIndex") || "0");
        index += 1;
        localStorage.setItem("raffleIndex", index.toString());

        if (index >= queue.length) {
            setTimeout(() => {
                window.location.replace("https://scrap.tf/raffles");
            }, 2000);
        } else {
            window.location.href = queue[index];
        }
    }

    if (window.location.pathname === "/raffles") {
        autoScrollAndCollectRaffles();
    }
    if (window.location.pathname.startsWith("/raffles/")) {
        handleSingleRaffle();
    }
}

// üëë –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–∞—Ö —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏
(function () {
    const panel = document.querySelector('div.panel.panel-info .panel-heading');

    if (!panel || !panel.textContent.includes('Raffles you won')) {
        chrome.storage.local.set({ wins: [] }, () => {
            console.log("[AutoRaffler] üßπ –ü–æ–±–µ–¥ –Ω–µ—Ç ‚Äî —Ç–µ–∫—É—â–∏–π –∂—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω.");
        });
        return;
    }

    const raffleBlocks = document.querySelectorAll('.panel.panel-info .panel-raffle');
    if (!raffleBlocks.length) {
        chrome.storage.local.set({ wins: [] }, () => {
            console.log("[AutoRaffler] üßπ –ë–ª–æ–∫–æ–≤ –ø–æ–±–µ–¥ –Ω–µ—Ç ‚Äî —Ç–µ–∫—É—â–∏–π –∂—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω.");
        });
        return;
    }

    const currentWins = [];

    raffleBlocks.forEach(block => {
        const titleEl = block.querySelector('.raffle-name a');
        const dateEl = block.querySelector('.raffle-start-time');
        const itemEl = block.querySelector('.panel-raffle-items .item');
        if (!titleEl || !dateEl || !itemEl) return;

        const title = titleEl.textContent.trim();
        const date = new Date(dateEl.textContent.trim()).toLocaleDateString('ru-RU');
        const item = itemEl.getAttribute('data-title');
        const entry = `${date} –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ "${title}": "${item}"`;

        currentWins.push(entry);
    });

    chrome.storage.local.get({ wins: [], winsHistory: [] }, data => {
        const oldHistory = data.winsHistory || [];
        const updatedHistory = [...oldHistory];

        currentWins.forEach(entry => {
            if (!oldHistory.includes(entry)) {
                chrome.runtime.sendMessage({
                    type: "notify",
                    title: "üéâ –ü–æ–±–µ–¥–∞!",
                    message: entry
                });
                console.log("üèÜ –ù–æ–≤–∞—è –ø–æ–±–µ–¥–∞:", entry);
                updatedHistory.push(entry);
            }
        });

        chrome.storage.local.set({
            wins: currentWins,
            winsHistory: updatedHistory
        });
    });
})();
